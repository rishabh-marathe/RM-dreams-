1. Analyze the time complexity of the following Java code and suggest a way to improve it:
Ans: Without the actual code, it's difficult to provide a precise analysis. However, a general approach for analyzing time complexity in Java code involves:

- **Identifying loops**: Look at all loops in the code (for, while, etc.). The time complexity is often determined by the number of iterations the loop performs.
- **Identifying recursive calls**: If there are recursive methods, analyze how many times the method is called (using recurrence relations).
- **Checking function calls**: Look at any function calls and determine if they have constant time complexity or depend on the size of the input.


Q2. Find the value of T(2) for the recurrence relation T(n) = 3T(n-1) + 12n, given that T(0) = 5.
Ans: We are given the recurrence relation:

\[
T(n) = 3T(n-1) + 12n, \quad T(0) = 5
\]

We can solve for \( T(2) \) step by step:

- For \( T(1) \):
  \[
  T(1) = 3T(0) + 12 \times 1 = 3 \times 5 + 12 = 15 + 12 = 27
  \]
  
- For \( T(2) \):
  \[
  T(2) = 3T(1) + 12 \times 2 = 3 \times 27 + 24 = 81 + 24 = 105
  \]

Thus, \( T(2) = 105 \). 


Q3. Given a recurrence relation, solve it using a substitution method.
Ans: Recurrence relation:
\[
T(n) = T(n - 1) + c
\]

Where \( c \) is a constant. We will solve this using the substitution method:

1. Base case: Assume \( T(0) = d \), where \( d \) is some constant.

2. For \( T(n) \):
   \[
   T(n) = T(n - 1) + c
   \]
   Substituting recursively:
   \[
   T(n) = T(n - 2) + c + c
   \]
   \[
   T(n) = T(n - 3) + c + c + c
   \]
   Continuing this process until you reach \( T(0) \):
   \[
   T(n) = T(0) + n \times c
   \]
   Since \( T(0) = d \), we have:
   \[
   T(n) = d + n \times c
   \]

Thus, the solution is \( T(n) = d + n \times c \), which is O(n).


Q4. Given a recurrence relation:
Ans: \[
T(n) = 16T(n/4) + n^2 \log n
\]
Find the time complexity of this relation using the master theorem.

The recurrence is in the form:
\[
T(n) = aT(n/b) + f(n)
\]
Here, \( a = 16 \), \( b = 4 \), and \( f(n) = n^2 \log n \).

1. Compute \( \log_b a \):
   \[
   \log_b a = \log_4 16 = 2
   \]
   
2. Compare \( f(n) \) with \( n^{\log_b a} = n^2 \):
   - \( f(n) = n^2 \log n \) grows faster than \( n^2 \), but slower than \( n^3 \). This suggests that we are in the case 3 of the master theorem, where \( f(n) \) dominates \( n^{\log_b a} \).

3. The time complexity is \( O(f(n)) = O(n^2 \log n) \).

Thus, the time complexity of the recurrence relation is O(n^2 \log n).


Q5. Solve the following recurrence relation using recursion tree method:
\[
T(n) = 2T(n/2) + n
\]

1. Draw the recursion tree:
   - At the top level, we have \( T(n) \).
   - At the next level, we have \( 2 \times T(n/2) \), each with a cost of \( n/2 \), so the total cost at this level is \( 2 \times (n/2) = n \).
   - At the next level, we have 4 subproblems, each of size \( n/4 \), so the cost at this level is \( 4 \times (n/4) = n \).

   The recursion tree has a depth of \( \log n \), and at each level, the total work is \( n \).

2. The total work is the sum of work at all levels:
   \[
   T(n) = n + n + n + \cdots + n \quad (\log n \text{ times})
   \]
   Therefore:
   \[
   T(n) = n \log n
   \]

Thus, the time complexity is **O(n \log n)**.


Q6. Solve the following recurrence relation using recursion tree method:
Ans: \[
T(n) = 2T(n/2) + K
\]
Where \( K \) is a constant.

1. Draw the recursion tree:
   - At the top level, we have \( T(n) \).
   - At the next level, we have \( 2 \times T(n/2) \), each with a constant cost \( K \), so the total cost at this level is \( 2K \).
   - At the next level, we have 4 subproblems, each with a constant cost \( K \), so the total cost at this level is \( 4K \).

2. The recursion tree has a depth of \( \log n \), and at each level, the total work is a constant \( K \).

3. The total work is the sum of work at all levels:
   \[
   T(n) = K + 2K + 4K + \cdots + nK
   \]
   This forms a geometric series:
   \[
   T(n) = K \times (1 + 2 + 4 + \cdots + n) = K \times (2^0 + 2^1 + 2^2 + \cdots + 2^{\log n - 1})
   \]
   The sum of this series is \( O(n) \).

Thus, the time complexity is O(n).