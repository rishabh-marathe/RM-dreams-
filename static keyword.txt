1. Why do we need static keyword in Java Programming?
Ans:
The static keyword in Java is used to indicate that a member belongs to a class rather than an instance of a class. This means that the member can be accessed without having to create an instance of the class.

Here are some common uses of static in Java:
- To create class-level variables that are shared by all instances of a class.
- To create class-level methods that can be called without creating an instance of a class.¢
- To create a block of code that is executed when a class is loaded.
- In general, static is used to create class-level members that are independent of any specific instance of a class and can be accessed without creating an instance of the class.
- In Java, static is a keyword that is used for memory management mainly. Static means single copy storage for variables or methods.
- The members that are marked with the static keyword inside a class are called static members.

2. What is class loading and how does the Java program actually executes?

Ans: Class Loading
In Java, classloading is the process of loading class files into the JVM(Java Virtual machine) at runtime. It is responsible for loading classes from various sources, such as the file system, network, and databases, and making them available to the JVM for execution. The class loading process in Java is divided into three phases: loading, linking, and initialization.
Loading: In the loading phase, the class loader locates the class file
using the fully qualified class name, reads the class file, and converts it into a Class
object. The Class object contains the metadata of the class, such as the fields, methods, and constructors.
Linking: In the linking phase, the JVM performs several operations on the Class object, such as verifying the class file's integrity, resolving symbolic references, and allocating memory for the class variables.
Initialization: In the initialization phase, the JVM initializes the class variables with their default values, and runs the class's static initialization block (if any).

3. Can we mark a local variable as static?
Ans: No, we cannot mark a local variable with a static keyword.

4. Why is a static method also called a class method?
Ans: A static method is also called a class method because it ties to a class rather than an individual instance of a class. Therefore, we need not create an object of the class to call and execute a static method.

5. Why is the static block executed before the main method in java?
Ans: When the dot class file is loaded into memory, a static block is executed. After executing the static block, JVM calls the main method to start execution. Therefore, the static block is executed before the main method.

6. What is the use of static keyword Explain with an example
Ans:
The static keyword in Java is used to indicate that a member

belongs to a class rather than an

instance of a class. This means that the

member can be accessed without having to create an

instance of the class.
Here is an example that demonstrates the use of the static keyword in
Java:

public class Counter {
private static int count = 0;
public Counter() {
count++;
}
public static int getCount() {
return count;
}
}
In this example, the count variable is declared as static, which means it is a class-level variable that is shared by all instances of the Counter class. The getCount method is also declared as static, which means it can be called without creating an instance of the Counter class.

7. The difference between a static variable and instance variable is as
follows:
Ans: A static variable is also called a class variable whereas an instance variable is also called a non static variable.
« Class variables can be accessed inside a static block, instance block, static method, instance method, and method of the inner class whereas, instance variable can be accessed only inside the instance members, and method of the inner class.
« Class variable is always resolved during compile time whereas, instance variable is resolved during the runtime.
« Static variables cannot be serialized in Java whereas instance variables can be serialized.

8. Difference between static and non static members of a class
Ans: static
« These variables are called “class variables”.
« These variables will get memory in the method area.
« If the value does not change from object to object then we need to use static variables.
« Inside a static area we can access static variables only.
« Static variables are created using static keywords.

Non-static
« These variables are called “instance variables”.
« These variables will get memory in the heap area.
« If the value changes from object to object then we need to use “non-static” variables.